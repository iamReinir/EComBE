@page
@model EComAdmin.Pages.Chat.RoomModel
@{
    ViewData["Title"] = "Chat room";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

<div class="container mt-5">
    <h2 class="text-center">WebSocket Chatroom</h2>
    <div class="card">
        <div class="card-body">
            <div id="chat-box" class="mb-3 border p-3" style="height: 300px; overflow-y: auto; background-color: #f8f9fa;">
                @foreach(var item in Model.Items)
                {
                    if (string.IsNullOrEmpty(item.Content))
                        continue;
                    string admin = "bg-secondary";
                    if (item.IsAnswer) admin = "bg-light";
                    <div class="p-2 mb-2 border rounded @admin">
                        @item.Content
                    </div>
                }
            </div>
            <div class="input-group"> 
                <input type="text" id="message-input" class="form-control" placeholder="Type a message...">
                <button id="send-btn" class="btn btn-primary">Send</button>
            </div>
        </div>
    </div>
</div>

<!-- WebSocket and JavaScript -->
<script> 
    const socket = new WebSocket('@Model.WSendpoint/chat/admin/@Model.UserId');

    // Event for when connection opens
    socket.onopen = () => {
        alert('Connected to chat room');
    };

    function addMessage(text, isAdmin){
        const chatBox = document.getElementById('chat-box');
        const newMessage = document.createElement('div');
        newMessage.classList.add('p-2', 'mb-2', 'border', 'rounded');
        if (isAdmin)
            newMessage.classList.add('bg-secondary');
        else
            newMessage.classList.add('bg-light');
        newMessage.textContent = text;
        chatBox.appendChild(newMessage);
    }
    // Event for receiving messages
    socket.onmessage = (event) => {
        addMessage(event.data, false);
        chatBox.scrollTop = chatBox.scrollHeight; // Auto-scroll to the latest message
    };

    // Event for errors
    socket.onerror = (error) => {
        alert('WebSocket error:', error);
    };

    // Send message function
    document.getElementById('send-btn').onclick = () => {
        const input = document.getElementById('message-input');
        const message = input.value.trim();
        if (message) {
            socket.send(message);  // Send message through WebSocket
            input.value = '';      // Clear input field
            addMessage(message, true);
        }
    };

    // Optionally, send message on Enter key press
    document.getElementById('message-input').addEventListener('keypress', (event) => {
        if (event.key === 'Enter') {
            document.getElementById('send-btn').click();
        }
    });
</script>

